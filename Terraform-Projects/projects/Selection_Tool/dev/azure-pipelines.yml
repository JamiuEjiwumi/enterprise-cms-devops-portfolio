# trigger:
#   branches:
#     include:
#       - main

# pool:
#   vmImage: ubuntu-latest

# stages:
#   - stage: tfvalidate
#     jobs:
#       - job: validate
#         continueOnError: false
#         steps:
#         - task: TerraformInstaller@1
#           displayName: Install Terraform
#           inputs:
#             terraformVersion: 'latest'
        
#         - task: TerraformTaskV4@4
#           displayName: Terraform Init
#           inputs:
#             workingDirectory: $(system.DefaultWorkingDirectory)/projects/RL_Variety_Selection_Tool/dev
#             provider: 'azurerm'
#             command: 'init'
#             backendServiceArm: 'DevTestServiceConn'
#             backendAzureRmResourceGroupName: 'TerraformRG'
#             backendAzureRmStorageAccountName: 'terraformsa1203'
#             backendAzureRmContainerName: 'rlvaritytoolstate'
#             backendAzureRmKey: 'terraform.tfstate'

#         - task: TerraformTaskV4@4
#           displayName: Terraform Validate
#           inputs:
#             provider: 'azurerm'
#             command: 'validate'
#             workingDirectory: $(system.DefaultWorkingDirectory)/projects/RL_Variety_Selection_Tool/dev
          
#   - stage: tfdeploy
#     condition: succeeded('tfvalidate')
#     dependsOn: tfvalidate
#     jobs:
#       - job: apply
#         # environment: Development
#         steps:
#         - task: TerraformInstaller@1
#           displayName: Install Terraform
#           inputs:
#             terraformVersion: 'latest'
        
#         - task: TerraformTaskV4@4
#           displayName: Terraform Init
#           inputs:
#             provider: 'azurerm'
#             command: 'init'
#             backendServiceArm: 'DevTestServiceConn'
#             backendAzureRmResourceGroupName: 'TerraformRG'
#             backendAzureRmStorageAccountName: 'terraformsa1203'
#             backendAzureRmContainerName: 'rlvaritytoolstate'
#             backendAzureRmKey: 'terraform.tfstate'
#             workingDirectory: $(system.DefaultWorkingDirectory)/projects/RL_Variety_Selection_Tool/dev
          
#         - task: TerraformTaskV4@4
#           displayName: Terraform Plan
#           inputs:
#             provider: 'azurerm'
#             command: 'plan'
#             environmentServiceNameAzureRM: 'DevTestServiceConn'
#             workingDirectory: $(system.DefaultWorkingDirectory)/projects/RL_Variety_Selection_Tool/dev
        
#         - task: TerraformTaskV4@4
#           displayName: Terraform Apply
#           inputs:
#             provider: 'azurerm'
#             command: 'apply'
#             environmentServiceNameAzureRM: 'DevTestServiceConn'
#             additionalArguments: '-auto-approve=false'
#             workingDirectory: $(system.DefaultWorkingDirectory)/projects/RL_Variety_Selection_Tool/dev


trigger:
  branches:
    include:
      - none

pool:
  vmImage: ubuntu-latest

variables:
  terraformVersion: 'latest'
  workingDir: '$(System.DefaultWorkingDirectory)/projects/RL_Variety_Selection_Tool/dev'
  backendServiceArm: 'DevTestServiceConn'
  resourceGroupName: 'TerraformRG'
  storageAccountName: 'terraformsa1203'
  containerName: 'rlvaritytoolstate'
  tfStateKey: 'terraform.tfstate'

stages:
  - stage: tfvalidate
    displayName: 'Terraform Validate'
    jobs:
      - job: validate
        displayName: 'Validate Terraform Code'
        continueOnError: false
        steps:
          - task: TerraformInstaller@1
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: $(terraformVersion)

          
          - script: terraform fmt -check -recursive
            displayName: Terraform Format Check
            workingDirectory: $(workingDir)


          - task: TerraformTaskV4@4
            displayName: 'Terraform Init'
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: $(backendServiceArm)
              backendAzureRmResourceGroupName: $(resourceGroupName)
              backendAzureRmStorageAccountName: $(storageAccountName)
              backendAzureRmContainerName: $(containerName)
              backendAzureRmKey: $(tfStateKey)
              workingDirectory: $(workingDir)

          - task: TerraformTaskV4@4
            displayName: 'Terraform Validate'
            inputs:
              provider: 'azurerm'
              command: 'validate'
              workingDirectory: $(workingDir)

  - stage: tfplan
    displayName: 'Terraform Plan'
    dependsOn: tfvalidate
    condition: succeeded('tfvalidate')
    jobs:
      - job: plan
        displayName: 'Generate Terraform Plan'
        steps:
          - task: TerraformInstaller@1
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: $(terraformVersion)

          - task: TerraformTaskV4@4
            displayName: 'Terraform Init'
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: $(backendServiceArm)
              backendAzureRmResourceGroupName: $(resourceGroupName)
              backendAzureRmStorageAccountName: $(storageAccountName)
              backendAzureRmContainerName: $(containerName)
              backendAzureRmKey: $(tfStateKey)
              workingDirectory: $(workingDir)

          - task: TerraformTaskV4@4
            displayName: 'Terraform Plan (Output to tfplan)'
            inputs:
              provider: 'azurerm'
              command: 'plan'
              environmentServiceNameAzureRM: $(backendServiceArm)
              workingDirectory: $(workingDir)
              additionalArguments: '-out=tfplan'

          - publish: $(workingDir)/tfplan
            artifact: terraformPlan

  - stage: tfapply
    displayName: Terraform Apply
    dependsOn: tfplan
    condition: succeeded()
    jobs:
      - deployment: apply
        environment: Development  
        strategy:
          runOnce:
            deploy:
              steps:
                - task: TerraformInstaller@1
                  displayName: Install Terraform
                  inputs:
                    terraformVersion: $(terraformVersion)

                - task: TerraformTaskV4@4
                  displayName: Terraform Init
                  inputs:
                    provider: 'azurerm'
                    command: 'init'
                    backendServiceArm: $(backendServiceArm)
                    backendAzureRmResourceGroupName: $(resourceGroupName)
                    backendAzureRmStorageAccountName: $(storageAccountName)
                    backendAzureRmContainerName: $(containerName)
                    backendAzureRmKey: $(tfStateKey)
                    workingDirectory: $(workingDir)

                - task: TerraformTaskV4@4
                  displayName: Terraform Apply
                  inputs:
                    provider: 'azurerm'
                    command: 'apply'
                    environmentServiceNameAzureRM: $(backendServiceArm)
                    additionalArguments: 'tfplan'
                    workingDirectory: $(workingDir)        